<?php

/*
$mysqli = new mysqli("127.0.0.1", "root", "root", "qirim_english_dictionary");


if (mysqli_connect_errno()) {
    printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: %s\n", mysqli_connect_error());
    exit();
}
$sql = "
    INSERT INTO
        `english_b`
    SET
        description = '2'
    ";

$mysqli->query($sql);
*/



$abbreviation_eng = [
    'n' => '1',
    'a' => '2' ,
    'adv' => '3',
    'attr.' => '4',
    'conj' => '5',
    'etc.' => '6',
    'imp.' => '7',
    'inf.' => '8',
    'int.' => '9',
    'num.' => '10',
    'o. s.' => '11',
    'p. p.' => '12',
    'pass.' => '13',
    'past.' => '14',
    'pl.' => '15',
    'pref.' => '16',
    'pres. p.' => '17',
    'pron.' => '18',
    'prep.' => '19',
    'refl.' => '20',
    'syn.' => '22',
    'smb.' => '23',
    'smth.' => '24',
    's. o.' => '25',
    'v.' => '26',
    'vi.' => '27',
    'vt.' => '28'
];
$abbreviation_rus = [
    '–∞–≤.' => '–∞–≤–∏–∞—Ü–∏—è',
    '–∞–≤—Å—Ç—Ä–∞–ª.' => '–∞–≤—Å—Ç–∞–ª–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–≤—Ç.' => '–∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    '–∞–º.' => '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–Ω–∞—Ç.' => '–∞–Ω–∞—Ç–æ–º–∏—è',
    '–∞–Ω–≥–ª.' => '–∞–Ω–≥–ª–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–º–µ—Ä.' => '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–Ω–≥–ª–æ–∏–Ω–¥.' => '–∞–Ω–≥–ª–æ–∏–Ω–¥–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞—Ä–∞–±.' => '–∞—Ä–∞–±—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞—Ä—Ç.' => '–∞—Ä—Ç–∏–ª–ª–µ—Ä–∏—è',
    '–∞—Ä—Ö.' => '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
    '–∞—Ä—Ö–µ–æ–ª.' => '–∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è',
    '–∞—Å—Ç—Ä.' => '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
    '–∞—Å—Ç—Ä–æ–ª.' => '–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è',
    '–±–∞–∫—Ç.' => '–±–∞–∫—Ç–µ—Ä–∏–æ–ª–æ–≥–∏—è',
    '–±–∏–±–ª.' => '–±–∏–±–ª–µ–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–±–∏–æ–ª.' => '–±–∏–æ–ª–æ–≥–∏—è',
    '–±–∏—Ä–∂.' => '–±–∏—Ä–∂–µ–≤–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–±–æ—Ç.' => '–±–æ—Ç–∞–Ω–∏–∫–∞',
    '–±—É–∫–≤.' => '–±—É–∫–≤–∞–ª—å–Ω–æ',
    '–±—É—Ö–≥.' => '–±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–≤–µ—Ç.' => '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è',
    '–≤–º.' => '–≤–º–µ—Å—Ç–æ',
    '–≤–æ–µ–Ω.' => '–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ',
    '–≤–æ–ø—Ä–æ—Å.' => '–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π',
    '–≤ —Ä–∞–∑–Ω. –∑–Ω–∞—á.'  => '–≤ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö',
    '–≤—É–ª—å–≥.' => '–≤—É–ª—å–≥–∞—Ä–∏–∑–º',
    '–≥.' => '–≥–æ—Ä–æ–¥',
    '–≥–µ–Ω–µ—Ç.' => '–≥–µ–Ω–µ—Ç–∏–∫–∞',
    '–≥–µ–æ–≥—Ä.' => '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è',
    '–≥–µ–æ–¥.' => '–≥–µ–æ–¥–µ–∑–∏—è',
    '–≥–µ–æ–ª.' => '–≥–µ–æ–ª–æ–≥–∏—è',
    '–≥–µ–æ–º.' => '–≥–µ–æ–º–µ—Ç—Ä–∏—è',
    '–≥–µ—Ä.' => '–≥–µ—Ä–∞–ª—å–¥–∏–∫–∞',
    '–≥–∏–¥—Ä.' => '–≥–∏–¥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
    '–≥–ª.' => '–≥–ª–∞–≤–Ω—ã–º',
    '–≥–ª–∞–≥.' => '–≥–ª–∞–≥–æ–ª',
    '–≥–æ–ª–ª.' => '–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–≥–æ—Ä–Ω.' => '–≥–æ—Ä–Ω–æ–µ –¥–µ–ª–æ',
    '–≥—Ä–∞–º.' => '–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞',
    '–≥—Ä–µ—á.' => '–≥—Ä–µ—á–µ—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–≥—Ä—É–±.' => '–≥—Ä—É–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '–¥–µ—Ç.' => '–¥–µ—Ç—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–¥–∏–∞–ª.' => '–¥–∏–∞–ª–µ–∫—Ç–∏–∑–º',
    '–¥–∏–ø.' => '–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–¥—Ä.-–≥—Ä–µ—á.' => '–¥—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
    '–¥—Ä.-—Ä–∏–º.' => '–¥—Ä–µ–≤–Ω–µ—Ä–∏–º—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
    '–µ–¥.—á.' => '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ',
    '–∂–∞—Ä–≥.' => '–∂–∞—Ä–≥–æ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '–∂–∏–≤.' => '–∂–∏–≤–æ–ø–∏—Å—å',
    '–∂.—Ä.' => '–∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥',
    '–∂.-–¥.' => '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '–∑–æ–æ–ª.' => '–∑–æ–æ–ª–æ–≥–∏—è',
    '–∏ –¥—Ä.' => '–∏ –¥—Ä—É–≥–æ–µ',
    '–∏ –ø—Ä.' => '–∏ –ø—Ä–æ—á–µ–µ',
    '–∏–Ω—Ñ–æ—Ä–º.' => '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '–∏–Ω–¥.' => '–∏–Ω–¥–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∏—Ä–ª.' => '–∏—Ä–ª–∞–Ω–¥—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∏—Ä–æ–Ω.' => '–∏—Ä–æ–Ω–∏—á–Ω–æ',
    '–∏—Å–∫.' => '–∏—Å–∫—É—Å—Å—Ç–≤–æ',
    '–∏—Å–ø.' => '–∏—Å–ø–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∏—Å—Ç.' => '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–∏ —Ç.–ø.' => '–∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ',
    '–∏—Ç–∞–ª.' => '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∫–∞—Ä—Ç.' => '—Ç–µ—Ä–º–∏–Ω –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã',
    '–∫–∏–Ω–æ' => '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    '–∫–∏—Ç' => '–∫–∏—Ç–∞–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∫–æ–º.' => '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–∫–Ω–∏–∂–Ω.' => '–∫–Ω–∏–∂–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '–∫–æ–º–ø.' => '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    '–∫—É–ª.' => '–∫—É–ª–∏–Ω–∞—Ä–∏—è',
    '–ª.' => '–ª–∏—Ü–æ',
    '–ª–∞—Å–∫.' => '–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '–ª–∞—Ç.' => '–ª–∞—Ç–∏–Ω—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ª–µ—Å.' => '–ª–µ—Å–Ω–æ–µ –¥–µ–ª–æ',
    '–ª–∏–Ω–≥–≤.' => '–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞',
    '–ª–∏—Ç.' => '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
    '–ª–æ–≥.' => '–ª–æ–≥–∏–∫–∞',
    '–º–∞—Ç.' => '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    '–º–µ–¥.' => '–º–µ–¥–∏—Ü–∏–Ω–∞',
    '–º–µ—Å—Ç.' => '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
    '–º–µ—Ç–∞–ª.' => '–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è',
    '–º–µ—Ç–µ–æ—Ä.' => '–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—è',
    '–º–µ—Ç—Ä.' => '–º–µ—Ç—Ä–æ–ª–æ–≥–∏—è',
    '–º–µ—Ö.' => '–º–µ—Ö–∞–Ω–∏–∫–∞',
    '–º–∏–Ω.' => '–º–∏–Ω–µ—Ä–∞–ª–æ–≥–∏—è',
    '–º–∏—Ñ.' => '–º–∏—Ñ–æ–ª–æ–≥–∏—è',
    '–º–Ω.—á.' => '–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ',
    '–º–æ—Ä.' => '–º–æ—Ä—Å–∫–æ–µ –¥–µ–ª–æ',
    '–º—É–∑.' => '–º—É–∑—ã–∫–∞',
    '–Ω–∞–∫–ª.' => '–Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ',
    '–Ω–∞–ø—Ä.' => '–Ω–∞–ø—Ä–∏–º–µ—Ä',
    '–Ω–∞—Ä–µ—á.' => '–Ω–∞—Ä–µ—á–∏–µ',
    '–Ω–∞—É—á.' => '–Ω–∞—É—á–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–Ω–∞—á.' => '–Ω–∞—á–∞–ª–æ',
    '–Ω–µ–º.' => '–Ω–µ–º–µ—Ü–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–Ω–µ–æ–ª.' => '–Ω–µ–æ–ª–æ–≥–∏–∑–º',
    '–æ–±—ã–∫–Ω.' => '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ',
    '–æ–ø—Ç.' => '–æ–ø—Ç–∏–∫–∞',
    '–æ—Å–æ–±.' => '–æ—Å–æ–±–µ–Ω–Ω–æ',
    '–æ—Ö–æ—Ç.' => '–æ—Ö–æ—Ç–Ω–∏—á–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–æ—Ñ–∏—Ü.' => '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '–ø–∞—Ä–ª.' => '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ø–µ—Ä–µ–Ω.' => '–≤ –ø–µ—Ä–µ–Ω–æ—Å–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏',
    '–ø–æ–≥–æ–≤.' => '–ø–æ–≥–æ–≤–æ—Ä–∫–∞',
    '–ø–æ–ª.' => '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ø–æ–ª–∏–≥—Ä.' => '–ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—è',
    '–ø–æ—Ä—Ç—É–≥.' => '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–ø–æ—Å–ª.' => '–ø–æ—Å–ª–æ–≤–∏—Ü–∞',
    '–ø–æ—ç—Ç.' => '–ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ø—Ä–µ–≤–æ—Å—Ö.' => '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è',
    '–ø—Ä–µ–¥–ª.' => '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
    '–ø—Ä–µ–¥–ª–æ–≥.' => '–ø—Ä–µ–¥–ª–æ–≥–∞–º–∏',
    '–ø—Ä–µ–∑—Ä.' => '–ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ',
    '–ø—Ä–µ–∏–º.' => '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ',
    '–ø—Ä–µ–Ω–µ–±—Ä.' => '–ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ',
    '–ø—Ä–∏–±–ª.' => '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ',
    '–ø—Ä–∏–ª–∞–≥.' => '–∏–º—è –ø—Ä–∞–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
    '–ø—Ä–∏—Ç—è–∂.' => '–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
    '–ø—Ä—è–º.' => '–≤ –ø—Ä—è–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏',
    '–ø—Å–∏—Ö–æ–ª.' => '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è',
    '—Ä.' => '—Ä–æ–¥',
    '—Ä–∞–¥.' => '—Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞',
    '—Ä–∞–∑–≥.' => '—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—Ä–∞—Å–ø—Ä.' => '—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–æ',
    '—Ä–µ–¥–∫.' => '—Ä–µ–¥–∫–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–µ —Å–ª–æ–≤–æ',
    '—Ä–µ–ª.' => '—Ä–µ–ª–∏–≥–∏—è',
    '—Ä–∏—Ç.' => '—Ä–∏—Ç–æ—Ä–∏–∫–∞',
    '—Ä–æ–¥.' => '—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (–ø–∞–¥–µ–∂)',
    '—Å–≤.' => '—Å–≤—è—Ç–æ–π',
    '—Å–∫–∞–∑.' => '—Å–∫–∞–∑–æ—á–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—Å–º.' => '—Å–º–æ—Ç—Ä–∏',
    '—Å–æ–±–∏—Ä.' => '—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—Å–æ–∫—Ä.' => '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ',
    '—Å–æ—Å–ª–∞–≥.' => '—Å–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–π',
    '—Å–ø–æ—Ä—Ç.' => '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç',
    '—Å—Ä.' => '—Å—Ä–∞–≤–Ω–∏',
    '—Å—Ä–∞–≤–Ω–∏—Ç.' => '—Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è',
    '—Å—Ä.-–≤–µ–∫.' => '—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π',
    '—Å—Ç–µ–ø.' => '—Å—Ç–µ–ø–µ–Ω—å',
    '—Å—Ç—Ä.' => '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—Å—É—â.' => '–∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
    '—Å.-—Ö.' => '—Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
    '—Ç–≤–æ—Ä.' => '—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π (–ø–∞–¥–µ–∂)',
    '—Ç.–µ.' => '—Ç–æ –µ—Å—Ç—å',
    '—Ç–µ–∞—Ç—Ä.' => '—Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—Ç–µ–∫—Å—Ç.' => '—Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–µ –¥–µ–ª–æ',
    '—Ç–µ–ª.' => '—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è',
    '—Ç–µ–ª–µ–≤.' => '—Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ',
    '—Ç–µ—Ö.' => '—Ç–µ—Ö–Ω–∏–∫–∞',
    '—Ç–∂.' => '—Ç–∞–∫–∂–µ',
    '—Ç–æ–ø–æ–≥—Ä.' => '—Ç–æ–ø–æ–≥—Ä–∞—Ñ–∏—è',
    '—Ç—É—Ä.' => '—Ç—É—Ä–µ—Ü–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—É–º–µ–Ω—å—à.' => '—É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞',
    '—É–Ω–∏–≤.' => '—É–Ω–∏–≤–µ—Ä—Å–∫–∏—Ç–µ—Ç—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '—É–ø–æ—Ç—Ä.' => '—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è',
    '—É—Å—Ç.' => '—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—É—Ç–≤–µ—Ä–¥.' => '—É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–π',
    '—Ñ–∞—Ä–º.' => '—Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è',
    '—Ñ–∏–∑.' => '—Ñ–∏–∑–∏–∫–∞',
    '—Ñ–∏–∑–∏–æ–ª.' => '—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è',
    '—Ñ–∏–ª–æ–ª.' => '—Ñ–∏–ª–æ–ª–æ–≥–∏—è',
    '—Ñ–∏–ª–æ—Å.' => '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è',
    '—Ñ–∏–Ω.' => '—Ñ–∏–Ω–∞–Ω—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—Ñ–æ–Ω.' => '—Ñ–æ–Ω–µ—Ç–∏–∫–∞',
    '—Ñ–æ—Ç.' => '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    '—Ñ—Ä.' => '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—Ñ—É—Ç–±.' => '—Ñ—É—Ç–±–æ–ª',
    '—Ö–∏–º.' => '—Ö–∏–º–∏—è',
    '—Ö–∏—Ä.' => '—Ö–∏—Ä—É—Ä–≥–∏—è',
    '—Ü–µ—Ä–∫.' => '—Ü–µ—Ä–∫–æ–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—á—Ç–æ-–Ω.' => '—á—Ç–æ-–Ω–∏–±—É–¥—å',
    '—à–∞—Ö–º.' => '—à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—à–∫.' => '—à–∫–æ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—à–æ—Ç–ª.' => '—à–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—à—É—Ç–ª.' => '—à—É—Ç–ª–∏–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—ç–≤—Ñ.' => '—ç–≤—Ñ–µ–º–∏–∑–º',
    '—ç–∫.' => '—ç–∫–æ–Ω–æ–º–∏–∫–∞',
    '—ç–ª.' => '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    '—é–∂–Ω–æ–∞—Ñ—Ä.' => '—é—ç–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—é—Ä.' => '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '—è–ø.' => '—è–ø–æ–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è'
];
$word_data = [
        'origin' => '',
        'translation' => ''
 ];
 
 $current_object = [
        'origin' => '',
        'words' => []
 ];
 
 $result = [];
 $qirim_result = [];
 
function scanPage(){
    set_time_limit(8000);
    $result_object = [];
    global $word_data;
    global $current_object;
    global $result;
    global $qirim_result;
    
    $letters = [
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
    ];
    for($k = 0; $k < count($letters); $k++){
        $words= explode('<ar>',file_get_contents('gufo_words/'.$letters[$k].'.txt'));
        
        $file = '';
        for($i = 1; $i < count($words); $i++){
            $origin = explode('</origin>',$words[$i]);
            if(strpos($origin[1], '</tr>')){
                $transcription_and_translation  = explode('</tr>',$origin[1]);
                $word_data['transcription']= str_replace('<tr>', '', $transcription_and_translation[0]);
                $word_data['translation']= strip_tags(str_replace('</ar>', '', $transcription_and_translation[1]));
            } else {
                $word_data['transcription'] = '';
                $word_data['translation']= strip_tags(str_replace('</ar>', '', $origin[1]));
            }
            
            $word_data['origin']= rawurldecode( str_replace('<origin>', '', $origin[0]));
            if(strpos( $word_data['origin'], '_')){
                $word_data['origin'] = preg_replace('/_[a-z]?[0-1]+/', '',$word_data['origin']);
                $word_data['origin'] = str_replace('_', ' ', $word_data['origin']);
            }

            $current_object = [
                'origin' => $word_data['origin'],
                'transcription' =>  $word_data['transcription'] ,
                 'words' => [],
                'abbrevation_eng' => [],
                'abbrevation_rus' => []
            ];
            $word_data['translation'] = getTranslation($word_data['translation']);
            
            $result_object['word'] = $word_data['translation'];
            $current_object = [
                    'origin' => '',
                    'transcription' => '',
                    'translation' => '',
                    'abbrevation_eng' => [],
                    'abbrevation_rus' => []
             ];
            
            //$words[$i]['size'] = sizeof($words[$i]['translation']);
        }
        //print_r($result);
    }
} 

function getTranslation($word){
    $word_string = [];
    global $abbreviation_rus;
    global $current_object;
    set_time_limit(8000);
    $word_string['word'] = $word;
    $result_object = findAbbreviationEng($word);
    $result_object['abbreviation_rus'] = [];
    foreach ($abbreviation_rus as $abbr_rus=>$value){
        preg_match('/^[\S]+'.str_replace('.','\.',$abbr_rus).'/', $result_object['word'], $matches);
        if($matches){
                continue;
        }
        if (strpos($result_object['word'],$abbr_rus) > -1 && strpos($result_object['word'],$abbr_rus) < 6){
            $new_word_string = str_replace($abbr_rus,'', $result_object['word']);
            $result_object['word'] = $new_word_string;
            array_push($result_object['abbreviation_rus'],$value);
        } else {
             continue;
        }
    }
    $current_object['abbreviation_eng'] = $result_object['abbreviation_eng'];
    $current_object['abbreviation_rus'] = $result_object['abbreviation_rus'];
    
    if(strpos($result_object['word'],'_I')>-1){
        $result_object['word'] = getFirstMeaning($result_object['word']);
    } else if (strpos($result_object['word'],'1.')>-1){
        $result_object['word'] = getSecondMeaning($result_object);
    } else if(strpos($result_object['word'],'1)')>-1){
        
        $result_object['word'] = getThirdMeaning($result_object);
    } else if(strpos($result_object['word'],'–∞)')>-1){
        $result_object['word'] = getFourthMeaning($result_object);
    } else {
        $result_object = findAbbreviationRus($result_object);
    }
    return $result_object;
    //getQirimTranslation(trim($newhtml));
}
function getFirstMeaning($translation_string){
    $result_object = [];
    $translation_lvl1 = preg_split("/(_I+V?)/", $translation_string);
    array_shift($translation_lvl1);
    foreach ($translation_lvl1 as $second_meaning){
        if(strpos($second_meaning,'1.')>-1){
            $new_second_meaning = findAbbreviationEng($second_meaning);
            array_push($result_object, getSecondMeaning($new_second_meaning));
        } else {
            if(strpos($second_meaning,'1)')>-1){
                $third_meaning = getThirdMeaning($third_meaning);
                array_push($result_object,$third_meaning );
            } else {
                $check_eng = findAbbreviationEng($second_meaning);
                array_push($result_object,findAbbreviationRus($check_eng));
            }
        }
    }
    
    return $result_object;    
}

function getSecondMeaning($translation_string){
    $result_object = [
        'abbreviation_eng' => $translation_string['abbreviation_eng'],
        'word' => []
        
    ];
    
    $second_meaning = preg_split("/[0-9]\./", $translation_string['word']);
   
    array_shift($second_meaning);
    foreach ($second_meaning as $third_meaning){
        if(strpos($third_meaning,'1)')>-1){
            $check_eng = findAbbreviationEng($third_meaning);
            $new_meaning = getThirdMeaning($check_eng);
            array_push($result_object['word'],$new_meaning );
        } else {
            $check_eng = findAbbreviationEng($third_meaning);
            array_push($result_object['word'],findAbbreviationRus($check_eng));
        }
    }
    return $result_object;
}

function getThirdMeaning($translation_string){
    $result_object = [
        'abbreviation_eng' => $translation_string['abbreviation_eng'],
        'word' => []
    ];
    
    $third_meaning = preg_split("/([0-9]*\))/", $translation_string['word']);
    array_shift($third_meaning);
    
            
    foreach ($third_meaning as $fourth_meaning){
        if(strpos($third_meaning,'–∞)')>-1){
            $check_eng = findAbbreviationEng($fourth_meaning);
            $new_meaning = getFourthMeaning($check_eng);
            array_push($result_object['word'],$new_meaning );
        } else {
            $check_eng = findAbbreviationEng($fourth_meaning);
            array_push($result_object['word'],findAbbreviationRus($check_eng));
        }
    }
    return $result_object; 
}


function getFourthMeaning($translation_string){
    $result_object = [
        'abbreviation_eng' => $translation_string['abbreviation_eng'],
        'word' => []
    ];
    
    $third_meaning = preg_split("/[–∞-—è]{1}\)/", $translation_string['word']);
    array_shift($third_meaning);
    foreach ($third_meaning as $meaning){
            $check_eng = findAbbreviationEng($meaning);
            array_push($result_object['word'],findAbbreviationRus($check_eng) );
    }
    return $result_object; 
}

$previous_abbreviation_eng = '';

function findAbbreviationEng($word_string){
    
    error_reporting(0);
    global $previous_abbreviation_eng;
    global $abbreviation_eng;
    $meaning_object = [
                'word' => $word_string,
                'abbreviation_eng' => []
    ];
    foreach ($abbreviation_eng as $abbr_eng=>$value){
        if (strpos($word_string, $abbr_eng) > -1 && strpos($word_string, $abbr_eng) < 6){
            $new_word_string = str_replace($abbr_eng, '', $word_string);
            $previous_abbreviation_eng = $value;
            return $meaning_object = [
                'word' => $new_word_string,
                'abbreviation_eng' => $value
            ];
        } else {
            continue;
        }
    }
    
    $meaning_object['abbreviation_eng'] = $previous_abbreviation_eng;
    error_reporting(1);
    return $meaning_object;
}

function findSynonims ($word){
    //$mysqli = new mysqli("127.0.0.1", "root", "root", "qirim_english_dictionary");
    //$mysqli->set_charset("utf8");
    global $abbreviation_eng;
    $word['synonim'] = '';
    if (strpos($word['word'],'_Syn:')>-1){
        $synonims = preg_split('/(_Syn:)/', $word['word']);
        $word['word'] = $synonims[0];
        $synonim = $synonims[1];
        if(strpos($synonim,'_Ant:')>-1){
           $antonims = preg_split('/(_Ant:)/', $synonim);
           $word['antonim'] = explode(',', $antonims[1]); 
           $word['synonim'] = explode(',', $antonims[0]);
        }else{
           $word['synonim'] = explode(',', $synonim);
        }
    } else if (preg_match('/= [a-z]*/',$word['word'])){
        if(preg_match('/[–∞-—è–ê-–Ø]+/',$word['word'])){
            $synonim = explode('=',$word['word']);
            $word['word'] = $synonim[1];
            foreach ($abbreviation_eng as $abbr_eng=>$value){
                if (strpos($word['word'],'_'.$abbr_eng) > -1 ){
                    $new_word_string = str_replace('_'.$abbr_eng, '|', $word['word']);
                    $previous_abbreviation_eng = $value;
                    $array = explode('|',$new_word_string);
                    $word['word'] = $array[1];
                    $word['new_eng_word'] = rtrim(ltrim($array[0]));
                    $word['abbreviation_eng'] = $value;
                    break;
                }
            }
           /* $eng_origin1_word_id = mysqli_fetch_row($mysqli->query("SELECT eng_word_id FROM qirim_english_dictionary.eng_words WHERE name = '".$word['origin']."', part_of_speech_id = '".$word['abbreviation_eng']."' "))[0];
            $mysqli->query("UPDATE qirim_english_dictionary.eng_words SET part_of_speech_id = '".$word['abbreviation_eng']."' WHERE eng_word_id = '".$eng_origin1_word_id."'");
            $mysqli->query("INSERT INTO qirim_english_dictionary.rus_words SET name = '".$word['word']."',part_of_speech_id = '".$word['abbreviation_eng']."'");
            $rus1_word_id = mysqli_fetch_row($mysqli->query("SELECT rus_word_id FROM qirim_english_dictionary.rus_words WHERE name = '".$word['word']."'"))[0];
            $mysqli->query("INSERT INTO qirim_english_dictionary.`references` SET eng_word_id = '".$eng_origin1_word_id."',rus_word_id = '".$rus1_word_id."'");
            $mysqli->query("INSERT INTO qirim_english_dictionary.eng_word_examples SET description = '".$word['new_eng_word']."',eng_word_id = '".$eng_origin1_word_id."'");
         */
            
        } else {
            $synonim = explode('=',$word['word']);
            $word['synonim'] = ltrim(preg_replace('/[0-9]/','',explode(',', $synonim[1])[0]));
            $word['synonim'] = trim(preg_replace('/\s+/', ' ', $word['synonim']));
            $word['word'] = $synonim[0];
            
            /*$eng_origin2_word_id = mysqli_fetch_row($mysqli->query("SELECT eng_word_id FROM qirim_english_dictionary.eng_words WHERE name = '".$word['origin']."' ,part_of_speech_id = '".$word['abbreviation_eng']."'"))[0];
            $eng_origin3_word_id = mysqli_fetch_row($mysqli->query("SELECT eng_word_id FROM qirim_english_dictionary.eng_words WHERE name = '".$word['synonim']."' ,part_of_speech_id = '".$word['abbreviation_eng']."'"))[0];
            
            $rus_references_list = mysqli_fetch_all($mysqli->query("SELECT rus_word_id FROM qirim_english_dictionary.`references` WHERE eng_word_id = '".$eng_origin3_word_id."'"));
            foreach ($rus_references_list as $rus){
                $mysqli->query("INSERT INTO qirim_english_dictionary.`references` SET eng_word_id = '".$eng_origin2_word_id."',rus_word_id = '".$rus[0]."'");
            }*/
        }
    }
    return $word;
    //$mysqli->close();
}


function findAbbreviationRus($word_string){
    error_reporting(0);
    global $abbreviation_rus;
    global $current_object;
    global $qirim_result;
    global $result;
    $meaning_object = [
                'word' => $word_string['word'],
                'abbreviation_eng' => $word_string['abbreviation_eng'],
                'abbreviation_rus' => []
    ];
    foreach ($abbreviation_rus as $abbr_rus=>$value){
        preg_match('/^[\S]+'.str_replace('.','\.',$abbr_rus).'/', $meaning_object['word'], $matches);
        if($matches){
                continue;
        }
        if (strpos($meaning_object['word'],$abbr_rus) > -1 && strpos($meaning_object['word'],$abbr_rus) < 6){
            $new_word_string = str_replace($abbr_rus,'', $meaning_object['word']);
            $meaning_object['word'] = $new_word_string;
            array_push($meaning_object['abbreviation_rus'],$value);
        } else {
             continue;
        }
    }
    
    if(!isset($meaning_object['abbreviation_rus'][0])){
        $meaning_object['abbreviation_rus']= $current_object['abbreviation_rus'];
    }
     if(empty($meaning_object['abbreviation_eng'])){
        $abbr_eng = findAbbreviationEng($meaning_object['word']);
        $meaning_object['abbreviation_eng']= $abbr_eng['abbreviation_eng'];
    }
    
    
    error_reporting(1);
    $meaning_object = findSynonims($meaning_object);
    //return;
    preg_match('/[A-Z]{1}[\s, \S]*[\.,?,!]?/', $meaning_object['word'], $matches);
    if($matches[0]){
        $meaning_object['big_example'] = $matches[0];
        $meaning_object['word'] = str_replace($matches[0], '', $meaning_object['word']);
    }
    
    preg_match_all('/\([a-z].*\)/', $meaning_object['word'], $descr_matches);
    if($descr_matches[0]){
        $meaning_object['description'] = $descr_matches[0];
        $meaning_object['word'] = str_replace($descr_matches[0], '', $meaning_object['word']);
    }
    
    preg_match_all('/\([–∞-—è,].*\)/', $meaning_object['word'], $rus_descr_matches);
    if($rus_descr_matches[0]){
        $meaning_object['rus_description'] = $rus_descr_matches[0];
        $meaning_object['word'] = str_replace($rus_descr_matches[0], '', $meaning_object['word']);
    }
    
    $meaning_object['origin'] = str_replace("'", "\'", $current_object['origin']);
    $meaning_object['transcription'] = preg_replace("/[\[\]]/", "", $current_object['transcription']);
    
    $tmp_word_array = [];
    $meaning_object['word'] = preg_split('/(;)/', $meaning_object['word']);
    
    for($i = 0; $i<count($meaning_object['word']);$i++){
        if(preg_match_all("/([\–∞-—è]*\,.*–∫–æ—Ç–æ—Ä)|([\–∞-—è]*\,.*?(—á—Ç–æ)|(—á–µ–π)|(—á—å—è)|(—á—å–µ))/", $meaning_object['word'][$i])){
            array_push($tmp_word_array, $meaning_object['word'][$i]);
        } else {
            $arr = explode(',', $meaning_object['word'][$i]);
            foreach($arr as $key){
                array_push($tmp_word_array, $key);
            }
        }
    }
    $meaning_object['word'] = $tmp_word_array;
    if(count($meaning_object['word'])>1){
        getLastMeaning($meaning_object);
    } else {
        $meaning_object['word'] = $meaning_object['word'][0];
        finalObject($meaning_object);
    }
}

function getLastMeaning($meaning_object){
    for($i = 0; $i < count($meaning_object['word']); $i++){
        $meaning_object['word'] = $meaning_object['word'][$i];
        finalObject($meaning_object);
    }
}

function finalObject($meaning_object){
    global $result;
    global $abbreviation_rus;
    $meaning_object['word'] = preg_replace("/(_[A-Za-z]\.)/", '', $meaning_object['word']);

    $meaning_object['word'] = ltrim($meaning_object['word']);
    foreach ($abbreviation_rus as $abbr_rus=>$value){
        if (strpos($meaning_object['word'],$abbr_rus) > -1 ){
            $new_word_string = str_replace($abbr_rus,'', $meaning_object['word']);
            $meaning_object['word'] = $new_word_string;
            array_push($meaning_object['abbreviation_rus'], $value);  
        } 
    }
    
    $meaning_object['word'] = preg_replace("/(_?[A-Za-z]*\.)/", '', $meaning_object['word']);
    preg_match_all("/([A-Za-z- ]+[^\S])/", $meaning_object['word'], $tiny_descr);
    if($tiny_descr){
        $meaning_object['tiny_example'] = $tiny_descr[0];
    } 
    $meaning_object['word'] = preg_replace("/[A-Za-z-]/", '', $meaning_object['word']);
    $meaning_object['word'] = preg_replace('/^ */', '', $meaning_object['word']);
    $meaning_object['word'] = preg_replace('/^\s+/', '', $meaning_object['word']);
    $meaning_object['word'] = rtrim($meaning_object['word']);
    if(strpos($meaning_object['word'],'‚óä')){
        $meaning_object['word'] = explode('‚óä',$meaning_object['word'])[0];
    }
    //array_push($result, $meaning_object);
    writeDownOrigin($meaning_object);    
    //return $meaning_object;
    
    //$meaning_object['qirim_translation'] = getQTTranslation($meaning_object['word']);
       /*
        if(count($meaning_object['qirim_translation']) == 0 ){
            $meaning_object['status'] = 'empty';
        } else if(count($meaning_object['qirim_translation']) == 1 && !is_array($meaning_object['qirim_translation'][0])){
            $meaning_object['status'] = 'complete';
        }  else if(count($meaning_object['qirim_translation']) > 1){
            $meaning_object['status'] = 'warning';
        }  else {
            $meaning_object['status'] = 'warning';
        }*/
        /*
        if(isset($meaning_object['qirim_translation'][0])){
            array_push($qirim_result, $meaning_object);
        }
        
         */
    /*$last_meaning_obj = [
            'word'=> preg_replace("/[^–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–´–™–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—ã—ä—ç—é—è ]/", '', $meaning_object['word'][$i]),
            'qirim_translation'=>getQTTranslation($meaning_object['word'][$i])
        ];
        $meaning_object['word'][$i] = $last_meaning_obj;*/
}


function writeDownOrigin ($word_object){
    $mysqli = new mysqli("127.0.0.1", "root", "root", "qirim_english_dictionary");
    $mysqli->set_charset("utf8");
    $sql = "
        INSERT INTO
            qirim_english_dictionary.eng_words
        SET
            name = '".$word_object['origin']."',
            transcription = '".$word_object['transcription']."',    
            part_of_speech_id = '".$word_object['abbreviation_eng']."'    
        ON DUPLICATE KEY UPDATE name = '".$word_object['origin']."',part_of_speech_id = '".$word_object['abbreviation_eng']."'
        ";
    $mysqli->query($sql);
    
     $sql_2 = "
                SELECT 
                    eng_word_id
                FROM
                    qirim_english_dictionary.eng_words
                WHERE
                    name = '".$word_object['origin']."' AND part_of_speech_id = '".$word_object['abbreviation_eng']."'
            ";
    $result = mysqli_fetch_row($mysqli->query($sql_2));
    $word_object['origin_id'] = $result[0];

    $mysqli->close();
    writeDownDescriptions($word_object);
}

function writeDownDescriptions ($word_object){
    $mysqli = new mysqli("127.0.0.1", "root", "root", "qirim_english_dictionary");
    $mysqli->set_charset("utf8");
    if($word_object['big_example']){
        $sql1 = "
            INSERT INTO 
                qirim_english_dictionary.eng_word_examples 
            SET 
                eng_word_id = '".$word_object['origin_id']."', 
                description = '".$word_object['big_example']."'   
            ";
        $mysqli->query($sql1);
    }
    if($word_object['tiny_example']){
        $sql2 = "
            INSERT INTO 
                qirim_english_dictionary.eng_tiny_descriptions 
            SET 
                eng_word_id = '".$word_object['origin_id']."', 
                tiny_description = '".$word_object['tiny_example'][0]."'   
            ";
        $mysqli->query($sql2);
    }
    if(count($word_object['rus_description'])>0){
        $rus_description = $word_object['rus_description'][0];
    } else {
        $rus_description = '';
    }
    if(count($word_object['abbreviation_rus'])>0){
        $abbreviation_rus = $word_object['abbreviation_rus'][0];
    } else {
        $abbreviation_rus = '';
    }
    if(count($word_object['description'])>0){
        $description = $word_object['description'][0];
    } else {
        $description = '';
    }

    $sql = "
        INSERT INTO
            qirim_english_dictionary.rus_words
        SET
            name = '".$word_object['word']."',    
            part_of_speech_id = '".$word_object['abbreviation_eng']."'
    ";
    $mysqli->query($sql);

    $sql_2 = "
        SELECT 
            rus_word_id
        FROM
            qirim_english_dictionary.rus_words
        WHERE
            name = '".$word_object['word']."'
        ";
    $result = mysqli_fetch_row($mysqli->query($sql_2));
    $rus_word_id = $result[0];
    if($description!='' || $abbreviation_rus != '' || $rus_description !=''){
        $sql3 = "
            INSERT INTO
                qirim_english_dictionary.rus_descriptions
            SET
                rus_word_id = '".$rus_word_id."',
                abbreviation = '".$abbreviation_rus."',
                rus_subdescription = '".$rus_description."',   
                eng_subdescription = '".$description."'   
            ";
        $mysqli->query($sql3);
    }
    $sql_3 = "
        INSERT INTO
            qirim_english_dictionary.references
        SET
            eng_word_id = '".$word_object['origin_id']."',    
            rus_word_id = '".$rus_word_id."'    
        ";
    $mysqli->query($sql_3);
            
    $mysqli->close();
}


function getQirimTranslation($word){
    $html = file_get_contents('https://gufo.me/dict/rucrh/'.$word);
    $start = strpos($html, 'lightslategray');
    $end = strpos($html, '<div class="fb-quote"></div>');

    $length = $end-$start;
    $html = substr($html, $start, $length);
    $html = strip_tags($html);
    $new_start = strpos($html, ']');
    $new_length = strlen($html)-$new_start;
    $newhtml = substr($html, $new_start+3, $new_length);
    
}
print_r(scanPage());
//print_r(validateTextWord());